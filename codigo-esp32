#include <WiFi.h>
#include <PubSubClient.h>

#define ssid "S22 de Pablo"
#define password "krfr5441"

// Configurações do MQTT
const char* mqttServer = "iluminacao.cloud.shiftr.io";
const int mqttPort = 1883;
const char* mqttUser = "iluminacao";
const char* mqttPassword = "D5ubCjvE0ASDln1u";

WiFiClient espClient;
PubSubClient client(espClient);

// Pinos do ESP32
const int controle = 22; // Pino de controle do dimmer
const int zc = 23;       // Pino de detecção de zero-crossing
const int botaoLigar = 18;  // Pino conectado ao botão de ligar/aumentar intensidade
const int botaoDesligar = 19; // Pino conectado ao botão de desligar/diminuir intensidade

int intensidadeObjetivo = 0;  // Intensidade desejada para transição
volatile int atrasoAtual = 8000;  // Atraso inicial em microsegundos

void IRAM_ATTR aumentarIntensidade() {
  if (intensidadeObjetivo < 100) {
    intensidadeObjetivo += 10;  // Aumenta a intensidade em 1%
  }
}

void IRAM_ATTR diminuirIntensidade() {
  if (intensidadeObjetivo > 0) {
    intensidadeObjetivo -= 10;  // Diminui a intensidade em 1%
  }
}

void IRAM_ATTR sincronizarComZeroCrossing() {
    // Limita a intensidade máxima a 80%
    int intensidadeLimitada = intensidadeObjetivo;
    if (intensidadeObjetivo >= 80) {
        intensidadeLimitada = 60;
    }

    // Calcula o atraso baseado na intensidade limitada
    atrasoAtual = map(intensidadeLimitada, 0, 100, 8200, 0);  // Ajuste de 8000 a 0 us

    // Sincroniza com o zero-crossing e aplica o atraso
    delayMicroseconds(atrasoAtual);
    digitalWrite(controle, HIGH);
    delayMicroseconds(10);  // Pulso curto para garantir acionamento do TRIAC
    digitalWrite(controle, LOW);
}

void setup() {
  Serial.begin(115200);

  // Configuração dos pinos
  pinMode(controle, OUTPUT);
  pinMode(zc, INPUT);
  pinMode(botaoLigar, INPUT_PULLUP);
  pinMode(botaoDesligar, INPUT_PULLUP);

  // Configuração das interrupções
  attachInterrupt(digitalPinToInterrupt(botaoLigar), aumentarIntensidade, FALLING);
  attachInterrupt(digitalPinToInterrupt(botaoDesligar), diminuirIntensidade, FALLING);
  attachInterrupt(digitalPinToInterrupt(zc), sincronizarComZeroCrossing, RISING);

  // Conecta à rede Wi-Fi
  conectarWiFi();

  // Configura o cliente MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callbackMQTT);

  // Conecta ao servidor MQTT
  conectarMQTT();
}

void loop() {
  // Verifica se o cliente MQTT está conectado
  if (!client.connected()) {
    conectarMQTT();
  }
  client.loop();
}

void conectarWiFi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando-se a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("WiFi conectado");
  Serial.println("IP: ");
  Serial.println(WiFi.localIP());
}

void conectarMQTT() {
  while (!client.connected()) {
    Serial.println("Conectando ao MQTT...");

    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Conectado ao MQTT");

      // Subscreve aos tópicos relevantes
      client.subscribe("controle/comando");
      client.subscribe("controle/variavel");
    } else {
      Serial.print("Falha ao conectar. Estado: ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void callbackMQTT(char* topic, byte* payload, unsigned int length) {
  String mensagem = "";

  for (int i = 0; i < length; i++) {
    mensagem += (char)payload[i];
  }

  Serial.print("Mensagem: ");
  Serial.println(mensagem);

  // Verifica o tópico e executa a ação apropriada
  if (String(topic) == "controle/comando") {
    if (mensagem == "ligar") {
      intensidadeObjetivo = 100;
    } else if (mensagem == "desligar") {
      intensidadeObjetivo = 0;  // Define o objetivo para 0%
    }
  } else if (String(topic) == "controle/variavel") {
    intensidadeObjetivo = mensagem.toInt();  // Ajusta a intensidade de acordo com a mensagem
  }
}

